using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEngine;
using SoftLiu.Utilities;

namespace SoftLiu.Localization
{
    public class Localization : AutoGeneratedSingleton<Localization>
    {
        private Dictionary<string, string> m_localizationVals = new Dictionary<string, string>();

        private const string m_file = "Localization_Chinese.csv";

        private string m_language;
        public string language
        {
            get
            {
                if (string.IsNullOrEmpty(m_language))
                {
                    m_language = PlayerPrefs.GetString("Language", "Chinese");
                }
                return m_language;
            }
            set
            {
                if (m_language != value)
                {
                    m_language = value;
                }
            }
        }

        public Localization()
        {
            //Resources.Load<TextAsset>("Localization_Chinese");
            LoadCSV(m_file);
        }

        public void LoadCSV(string fileName, bool merge = false)
        {
            try
            {
                string path = Application.dataPath + "/Resources/" + fileName;
                m_localizationVals.Clear();
                string[] lines = File.ReadAllLines(path, Encoding.UTF8);
                if (lines.Length <= 0)
                {
                    return;
                }
                for (int i = 1; i < lines.Length; i++)
                {
                    if (string.IsNullOrEmpty(lines[i]))
                    {
                        continue;
                    }
                    int index = lines[i].IndexOf(',');
                    string key = lines[i].Substring(0, index);
                    string value = lines[i].Substring(index + 1, lines[i].Length - index - 1);
                    if (!string.IsNullOrEmpty(value))
                    {
                        if (value[0] == '"' && value[value.Length - 1] == '"')
                        {
                            value = value.Substring(1, value.Length - 2);
                        }
                        if (!m_localizationVals.ContainsKey(key))
                        {
                            m_localizationVals.Add(key, value);
                        }
                    }
                }
            }
            catch (System.Exception error)
            {
                Debug.LogError("Localization ReadCSVFile Error: " + error.Message);
            }
        }

        public string Get(string key)
        {
            if (!m_localizationVals.ContainsKey(key))
            {
                return key;
            }
            return m_localizationVals[key];
        }

        public string Format(string key, params object[] parameters)
        {
            if (!m_localizationVals.ContainsKey(key))
            {
                return key;
            }
            return string.Format(Get(key), parameters);
        }

        public void LoadLanguageFromTextAsset(string language)
        {
            string localizationFile = null;
            if (language.ToLower().Equals("chinese"))
            {
                localizationFile = "Localization_Chinese.csv";
            }
            else if (language.ToLower().Equals("english"))
            {
                localizationFile = "Localization_English.csv";
            }
            if (localizationFile == null)
            {
                Debug.LogError("Main localization not found! Was attempting to load " + language);
                localizationFile = "Localization_English.csv";
            }
            this.language = language;
            LoadCSV(localizationFile, false);
        }
    }
}
