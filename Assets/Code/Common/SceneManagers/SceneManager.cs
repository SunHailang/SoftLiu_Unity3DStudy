using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using SoftLiu.Utilities;

namespace SoftLiu.SceneManagers
{
    public class SceneManager : AutoGeneratedSingleton<SceneManager>
    {
        private SceneStack m_currentSceneStack = null;
        public SceneStack CurrentSceneStack { get { return m_currentSceneStack; } }

        private SceneStack m_previousSceneStack = null;

        private Stack<SceneStack> m_SceneStack = new Stack<SceneStack>();


        public SceneManager()
        {
            m_SceneStack.Clear();
        }

        ~SceneManager()
        {
            m_SceneStack.Clear();
            m_SceneStack = null;
        }

        public void OnUpdate()
        {
            
        }

        public bool ExistSceneByName(string name)
        {
            UnityEngine.SceneManagement.Scene scene = UnityEngine.SceneManagement.SceneManager.GetSceneByName(name);
            if (scene != null)
            {
                //if (UnityEngine.SceneManagement.SceneManager.GetSceneByBuildIndex(i).name == name)
                {
                    return true;
                }
            }
            return false;
        }

        public void LoadScene(string name, UnityEngine.SceneManagement.LoadSceneMode mode)
        {
            UnityEngine.SceneManagement.SceneManager.LoadScene(name, mode);
        }

        public SceneAsyncData LoadSceneAsync(SceneStack scene)
        {
            if (scene == null) return null;
            try
            {
                if (!ExistSceneByName(scene.Name))
                {
                    return null;
                }
                List<AsyncOperation> assyncList = new List<AsyncOperation>();
                assyncList.Add(UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(scene.Name, scene.LoadMode));
                if (scene.AttachedName != null && scene.AttachedName.Length > 0)
                {
                    foreach (string item in scene.AttachedName)
                    {
                        assyncList.Add(UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(item, scene.LoadMode));
                    }
                }

                SceneAsyncData asyncData = new SceneAsyncData(scene.Name, assyncList, scene.Complete);
                
                if (m_previousSceneStack != null) m_SceneStack.Push(m_previousSceneStack);
                m_currentSceneStack = scene;
                m_previousSceneStack = m_currentSceneStack;
                return asyncData;
            }
            catch (System.Exception e)
            {
                Debug.LogError("LoadSceneAsync : " + e.Message);
            }
            return null;
        }

        public void BackSceneAsync()
        {
            SceneStack scene = null;
            if (m_SceneStack.Count <= 0)
            {
                // 加载 默认 FrontEnd 场景
                scene = new SceneStack("FrontEnd", UnityEngine.SceneManagement.LoadSceneMode.Single, null);
            }
            else
            {
                scene = m_SceneStack.Pop();
            }
            m_previousSceneStack = null;
            LoadSceneAsync(scene);
        }

        public AsyncOperation GoToInGame(SceneStack scene)
        {
            m_currentSceneStack = scene;
            //"MenuToIngame"
            return UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("MenuToIngame", UnityEngine.SceneManagement.LoadSceneMode.Single);
        }
    }

    public class SceneStack
    {
        public string Name { private set; get; }

        public System.Action<SceneAsyncData> Complete { private set; get; }

        public UnityEngine.SceneManagement.LoadSceneMode LoadMode { private set; get; }

        private string[] m_attachedName = null;
        public string[] AttachedName { get { return m_attachedName; } }

        public SceneStack(string sceneName, UnityEngine.SceneManagement.LoadSceneMode loadMode, System.Action<SceneAsyncData> sceneData, params string[] attachedName)
        {
            this.Name = sceneName;
            this.Complete = sceneData;
            this.LoadMode = loadMode;
            this.m_attachedName = attachedName;
        }
    }
}
