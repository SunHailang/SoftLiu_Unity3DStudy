using SoftLiu.Event;
using SoftLiu.Utilities;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class App : AutoGeneratedSingletonMonobehaviour<App>
{
    private bool m_init = false;

    private bool m_saveLoadCompleted = false;

    private int m_lastPauseTime = -1;

    private long m_serverTime = 0;
    public long serverTime { get { return m_serverTime; } }

    private void Awake()
    {

    }

    public void Init()
    {
        if (m_init) return;
        m_init = true;
    }

    private bool m_pause = false;
    public bool Pause
    {
        get { return m_pause; }
        set
        {
            if (m_pause != value)
            {
                m_pause = value;
                EventManager<Events>.Instance.TriggerEvent(Events.GamePause, m_pause);
            }
        }
    }

    private bool m_inGame = false;
    public bool InGame
    {
        get { return m_inGame; }
        set { m_inGame = value; }
    }

    private Player m_activePlayer = null;
    public void SetActivePlayer(Player player)
    {
        m_activePlayer = player;
    }

    public Player GetActivePlayer()
    {
        return m_activePlayer;
    }

    public void OnApplicationPause(bool pause)
    {
        if (m_saveLoadCompleted)
        {
            bool isInGame = m_inGame;
            int currentTime = Globals.GetUnixTimestamp();

            bool allowGameRestart = true;
            bool isReallyInGame = true;
            if (isReallyInGame)
            {
                allowGameRestart = false;
            }
            if (pause)
            {
                if (allowGameRestart)
                {
                    m_lastPauseTime = Globals.GetUnixTimestamp();
                }
                else
                {
                    m_lastPauseTime = -1;
                }
            }
            else
            {
                if (allowGameRestart)
                {

                }
            }
            if(m_inGame)
            {
                // if playing a level we need to pause the audio. it doesn't matter if the app will lose or get the focus, in any case we need to stop the audio.
                // PLEASE NOTE: we don't want to unpause the audio because that will be the dismission of the pause popup that will take care of it.
                if (pause)
                {
                    AudioManager.Instance.PauseAudio();
                }
            }
            AnalyticsManager.Instance.OnApplicationPause(pause);
        }
    }
}
