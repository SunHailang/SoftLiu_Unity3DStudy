using SoftLiu.Analytics;
using SoftLiu.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

public partial class AnalyticsManager : AutoGeneratedSingleton<AnalyticsManager>
{
    // Analytic event data, can be used to store analytic events
    private struct AnalyticEventData
    {
        public Enum m_eventType;
        public Dictionary<string, object> m_optParams;

        public AnalyticEventData(Enum eventType, Dictionary<string, object> optParams)
        {
            m_eventType = eventType;
            m_optParams = optParams;
        }
    }

    private AnalyticsSaveSystem m_analyticsSave;
    public AnalyticsSaveSystem SaveSystem { get { return m_analyticsSave; } }

    private bool m_isSessionActive;
    private bool m_analyticsPreRequirementsMet;     // Is ready to start/end session and report events, currently has only dependency on the save system

    private Queue<AnalyticEventData> m_pendingEvents = new Queue<AnalyticEventData>();   // Events pending to get reported (sent before analytics manager is initialized or during the game)


    private DateTime m_pauseTime = default(DateTime);

    private AnalyticsInitialisationParams m_initParams;

    private bool m_isInitialized = false;

    float m_timeAtLastStart = 0;

    public void Initialise()
    {

        if (m_analyticsSave == null)
        {
            // Register save system to track persistant data
            m_analyticsSave = new AnalyticsSaveSystem();
            SaveFacade.Instance.RegisterSaveSystem(m_analyticsSave);
            m_timeAtLastStart = Time.time;
        }
    }

    public void SaveLoaded(bool isHacker = false)
    {
        // Make sure not to initialize twice
        if (m_isInitialized)
        {
            return;
        }
        //  Create initialization params
        m_initParams = new AnalyticsInitialisationParams();
        //	If player is hacker we don't initialize any providers
        if (!isHacker)
        {

        }//	end_is_hacker

        //  Register game event listeners
        AddGameEventListeners();
        //  Do initialization
        AnalyticsFacade.Instance.Initialise(m_initParams);



        m_isInitialized = true;
    }

    public void OnApplicationPause(bool pause)
    {
        // Make sure time is not null
        if (m_pauseTime == default(DateTime))
        {
            m_pauseTime = DateTime.UtcNow;
        }

        if (pause)
        {
            // Set last time
            m_pauseTime = DateTime.UtcNow;
        }
    }

    public void StartSession()
    {
        m_timeAtLastStart = Time.time;
        // Return if not all analytics requirements are met or save system is not ready
        if (!m_analyticsPreRequirementsMet || m_analyticsSave == null || !m_isInitialized || m_isSessionActive)
        {
            return;
        }

        m_isInitialized = true;

        AnalyticsFacade.Instance.StartSession();

        m_analyticsSave.sessionCount++;

        m_isSessionActive = true;
        // Report all events which were called before analytics was ready
        while (m_pendingEvents.Count > 0)
        {
            AnalyticEventData data = m_pendingEvents.Dequeue();
            AnalyticsFacade.Instance.TriggerEvent(data.m_eventType, data.m_optParams);
        }

        SaveFacade.Instance.Save(m_analyticsSave.name);
    }

    public void EndSession()
    {
        if (!m_analyticsPreRequirementsMet || m_analyticsSave == null || !m_isInitialized || !m_isSessionActive)
        {
            return;
        }

        AnalyticsFacade.Instance.EndSession();
        m_isSessionActive = false;

        SaveFacade.Instance.Save(m_analyticsSave.name);
    }
    public void SetAnalyticsState(AnalyticsState state)
    {
        AnalyticsFacade.Instance.SetAnalyticsState(state);
    }

    public string GetAnalyticsUserID(Type providerType)
    {
        return AnalyticsFacade.Instance.GetAnalyticsProviderUserID(providerType);
    }

    private void TriggerEvent(Enum eventType, Dictionary<string, object> optParams)
    {
        if (optParams == null)
        {
            optParams = new Dictionary<string, object>();
        }
        try
        {
            // Don't report any events if the user is hacker
            // Don't report any events if device is not supported (iPhone 4s)
            if (SaveFacade.Instance.userSaveSystem.isHacker)
            {
                return;
            }
            // If analytics is not ready, save the event to fire it later
            if (App.Instance.InGame)
            {
                m_pendingEvents.Enqueue(new AnalyticEventData(eventType, optParams));
                return;
            }
            // Report any pending events
            if (m_pendingEvents != null)
            {
                while (m_pendingEvents.Count > 0)
                {
                    AnalyticEventData data = m_pendingEvents.Dequeue();
                    AnalyticsFacade.Instance.TriggerEvent(data.m_eventType, data.m_optParams);
                }
            }
            AnalyticsFacade.Instance.TriggerEvent(eventType, optParams);
            SaveFacade.Instance.Save(m_analyticsSave.name);
        }
        catch (Exception e)
        {
            Debug.LogWarning("Exception in sending analytics event :: Exception = " + e.ToString() + " Stack: " + e.StackTrace);
        }
    }

    private void CheckAndGenerateAnalyticsID()
    {
        if (m_analyticsSave != null)
        {
            // Take analytics ID from player prefs as it could be there before save system is loaded or generate the ID
            if (string.IsNullOrEmpty(m_analyticsSave.analyticsUserID))
            {
                m_analyticsSave.analyticsUserID = PlayerPrefs.GetString("futureAnalyticsID", AnalyticsUserID.GenerateUserID());
            }

            PlayerPrefs.SetString("futureAnalyticsID", m_analyticsSave.analyticsUserID);
        }
    }

    private void OnLoadComplete()
    {
        CheckAndGenerateAnalyticsID();
        if (SaveFacade.Instance.userSaveSystem.isHacker)
        {
            SetAnalyticsState(AnalyticsState.ANALYTICS_DISABLED);
        }
        if (m_isSessionActive)
        {
            // End old session
            EndSession();
        }

        m_analyticsPreRequirementsMet = true;
        // Start analytics session every time when save is loaded to make sure we have the correct data
        StartSession();
    }
}
