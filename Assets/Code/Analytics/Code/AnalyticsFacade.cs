using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SoftLiu.Utilities;

namespace SoftLiu.Analytics
{
    public class AnalyticsFacade : AutoGeneratedSingleton<AnalyticsFacade>
    {
        public event Action<AnalyticsState> AnalyticsStateChanged;
        private AnalyticsState m_analyticsState = AnalyticsState.ANALYTICS_NOT_LOADED;
        public AnalyticsState analyticsState
        {
            get { return m_analyticsState; }
        }
        //  Options passed to analytics for initialization
        AnalyticsInitialisationParams m_initializationParams;
        //  List of senders
        private List<AnalyticsProvider> m_analyticsProviders;
        //  Analytics Events
        private Dictionary<Enum, AnalyticsEventDelegate> m_events = new Dictionary<Enum, AnalyticsEventDelegate>();

        public void Initialise(AnalyticsInitialisationParams initParams)
        {
            //  Save initialization params
            m_initializationParams = initParams;
            //  Create list of analytics senders
            m_analyticsProviders = new List<AnalyticsProvider>();
            //  Add providers
            foreach (AnalyticsProvider provider in initParams.providers)
            {
                m_analyticsProviders.Add(provider);
            }
            //  Initialize them
            InitAnalyticProviders();
        }

        public void InitAnalyticProviders()
        {
            foreach (AnalyticsProvider provider in m_analyticsProviders)
            {
                provider.InitAnalyticsProvider(m_initializationParams);
            }
            //  Init with passed state
            SetAnalyticsState(m_initializationParams.state);
        }

        public void SetAnalyticsState(AnalyticsState state)
        {
            if (state == analyticsState || m_analyticsProviders == null)
            {
                //  NOOP with same state
                return;
            }
            //  Enable / disable providers depending on analytics state
            foreach (var provider in m_analyticsProviders)
            {
                Dictionary<Enum, AnalyticsEventDelegate> supportedEvents = provider.GetSupportedEvents();

                foreach (var pair in supportedEvents)
                {
                    if (state == AnalyticsState.ANALYTICS_ENABLED)
                    {
                        RegisterEvent(pair.Key, pair.Value);
                    }
                    else
                    {
                        DeregisterEvent(pair.Key, pair.Value);
                    }
                }
            }
            //  Update the state
            m_analyticsState = state;
            if (AnalyticsStateChanged != null)
            {
                AnalyticsStateChanged(m_analyticsState);
            }
        }
        public void RegisterEvent(Enum eventType, AnalyticsEventDelegate listener)
        {
            if (!m_events.ContainsKey(eventType))
            {
                m_events.Add(eventType, listener);
            }
            else
            {
                AnalyticsEventDelegate events = m_events[eventType];

                if (events == null || Array.IndexOf(events.GetInvocationList(), listener) == -1)
                {
                    m_events[eventType] += listener;
                }
                else
                {
                    AnalyticsLogger.LogError("FGOL.AnalyticsFacade - (RegisterEvent) :: Duplicate event listener: " + listener.Target.ToString() + "." + listener.Method.ToString());
                }
            }
        }

        public void DeregisterEvent(Enum eventType, AnalyticsEventDelegate listener)
        {
            if (m_events.ContainsKey(eventType))
            {
                m_events[eventType] -= listener;
            }
        }

        public void StartSession()
        {
            foreach (AnalyticsProvider provider in m_analyticsProviders)
            {
                provider.StartSession();
            }
        }

        public void EndSession()
        {
            foreach (AnalyticsProvider sender in m_analyticsProviders)
            {
                sender.EndSession();
            }
        }

        public void TriggerEvent(Enum eventType, Dictionary<string, object> optParams)
        {
            if (m_events.ContainsKey(eventType) && m_events[eventType] != null)
            {
                //  Fire event
                m_events[eventType](eventType, optParams);
            }
        }
        // Get user ID from requested provider, if the provider doesn't have user ID or doesn't implement the method, this function will return empty string
        public string GetAnalyticsProviderUserID(Type analyticsProviderType)
        {
            if (m_analyticsProviders != null)
            {
                for (int i = 0; i < m_analyticsProviders.Count; i++)
                {
                    if (m_analyticsProviders[i].GetType() == analyticsProviderType)
                    {
                        return m_analyticsProviders[i].GetUserID();
                    }
                }
            }
            return string.Empty;
        }
    }
}
