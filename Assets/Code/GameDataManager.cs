using SoftLiu.Authentication;
using SoftLiu.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using UnityEngine;
using UnityEngine.Profiling;

public class GameDataManager : AutoGeneratedSingleton<GameDataManager>
{
    public const string GameDBPath = "GameDB/gameDB";
    public const string GameDBJsonPath = "Assets/Misc/GameDB/gameDB.json";
    public const string cachedEventData = "CachedEventData";


    public const string PK = "lDFn+UwTbGdvMYnCASD7efuZ1IFKK6L2I9hldKzNROv99KTMcWNCs8B6k9soGn+kaOUfavZojwiahl9JecfErGRhvAQdOrKfQhU6sMEdxRpgPcYDVZjEWhMDr1+pkVKRwaViv3Kxhbt3if//UvhC9FNcdtCo7En2KJN27FEgMa8=";

    public const string dateTimeFormat = "dd/MM/yyyy HH:mm:ss";
    private const int CheckSumLength = 128;

    private GameDB m_db = null;
    private string m_previousCachedChecksum = null;

    private Dictionary<string, Dictionary<string, object>> m_eventInfo = new Dictionary<string, Dictionary<string, object>>();
    private Dictionary<string, int> m_loadedEvents = new Dictionary<string, int>();
    private bool m_eventsPending = false;

    private int m_gameDataID = -1;


    public GameDB gameDB
    {
        get { return m_db; }
    }

    public void LoadGameData()
    {
        Profiler.BeginSample("Parse GameDB JSON");
        Dictionary<string, object> jsonData = LoadLocalGameDBJson();
        Profiler.EndSample();

        Profiler.BeginSample("Load Local GameDB");
        try
        {
            if (jsonData != null)
            {
                GameData gameData = ScriptableObject.CreateInstance<GameData>();
                gameData.ImportDictionary(jsonData);

                m_db = new GameDB();
                m_db.Initialize(gameData.GetAllItems());
            }
            else
            {
                throw new System.Exception();
            }
        }
        catch (System.Exception e)
        {
            SoftLiu.Assert.Fatal(false, "Ensure the gameDB has been imported correctly - " + e);
        }
        Profiler.EndSample();

        Profiler.BeginSample("Load Cached GameDB");
        LoadCachedData(jsonData);
        Profiler.EndSample();
    }

    public void GetServerGameData()
    {

    }

    private void DeleteDBCache()
    {
        string filePath = string.Format("{0}/cached.gamedb", Application.temporaryCachePath);
        if (File.Exists(filePath))
        {
            File.Delete(filePath);
        }
    }

    private void DownloadGameData(string bucket, string url, System.Action<byte[]> onDownloadComplete)
    {
        //string gameDataUrl = string.Format()
    }

    private Dictionary<string, object> LoadLocalGameDBJson()
    {
        Profiler.BeginSample("Load .gdb");
        UnityEngine.Object gameDBJsonObj = ResourceLoaderManager.Instance.Load(GameDBPath + ".gdb", typeof(TextAsset));
        Profiler.EndSample();

        SoftLiu.Assert.Fatal(gameDBJsonObj != null, "Ensure the GameDB has been imported correctly");

        try
        {
            return GameDataUtils.DecryptDecodeDeserialize(((TextAsset)gameDBJsonObj).bytes, Encoding.Default);
        }
        catch (System.Exception e)
        {
            SoftLiu.Assert.Fatal(false, "Ensure the GameDB has been loaded correctly - " + e);
        }

        return null;
    }

    private void LoadCachedData(Dictionary<string, object> mergedData)
    {
        bool loadedCachedData = false;
        if (mergedData != null)
        {
            Dictionary<string, object> cacheMergedData = LoadCachedGameData(mergedData);
            if (cacheMergedData != null)
            {
                mergedData = cacheMergedData;
                loadedCachedData = true;
            }
            else
            {
                Debug.Log("GameDataManager :: Failed merging cached GameData!");
            }

            //Dictionary<string, object> eventMergeData = LoadCachedEventData(mergedData);

            //if (eventMergeData != null)
            //{
            //    mergedData = eventMergeData;
            //    loadedCachedData = true;
            //}

            if (loadedCachedData)
            {
                GameData gameData = ScriptableObject.CreateInstance<GameData>();
                gameData.ImportDictionary(mergedData);

                m_db = new GameDB();
                m_db.Initialize(gameData.GetAllItems());
                Debug.Log("GameDataManager :: Successfully loaded cached GameData!");
            }
        }
        else
        {
            Debug.LogError("GameDataManager :: Failed to deserialize original gameDB json!");
        }
    }
    private void LoadEventInfo()
    {
        m_eventInfo = new Dictionary<string, Dictionary<string, object>>();

        string cachedEventDataStr = PlayerPrefs.GetString(cachedEventData);

        if (!string.IsNullOrEmpty(cachedEventDataStr))
        {
            Dictionary<string, object> eventInfoDic = MiniJSON.Deserialize(cachedEventDataStr) as Dictionary<string, object>;

            if (eventInfoDic != null)
            {
                foreach (var pair in eventInfoDic)
                {
                    Dictionary<string, object> eventInfo = pair.Value as Dictionary<string, object>;

                    if (eventInfo != null)
                    {
                        m_eventInfo.Add(pair.Key, eventInfo);
                    }
                }
            }
        }
    }

    private Dictionary<string, object> LoadCachedEventData(Dictionary<string, object> baseData)
    {
        LoadEventInfo();
        m_loadedEvents.Clear();
        m_eventsPending = false;

        Dictionary<string, object> mergedData = baseData;

        List<string> oldEvents = new List<string>();

        foreach (var pair in m_eventInfo)
        {
            if (pair.Value.ContainsKey("end"))
            {
                Debug.Log("GameDataManager (LoadCachedEventData):: Checking event - " + pair.Key);

                int end = Convert.ToInt32(pair.Value["end"]);

                if (Authenticator.Instance.GetCurrentUnixTimestampWithServerTimeAsPriority() < end)
                {
                    Debug.Log("GameDataManager (LoadCachedEventData):: Loading event - " + pair.Key);

                    string checksum;
                    string json = ReadCachedData(GetCachedEventDataPath(pair.Key), out checksum, false);

                    if (!string.IsNullOrEmpty(json))
                    {
                        Dictionary<string, object> eventMerged = GameDataUtils.GetMergedData(mergedData, json);

                        //if (eventMerged != null)
                        //{
                        //    DailyEventsManager.Instance.OnEventDownloaded(pair.Key, json, false);
                        //    mergedData = eventMerged;
                        //    m_loadedEvents.Add(pair.Key, end);
                        //}
                        //else
                        //{
                        //    oldEvents.Add(pair.Key);
                        //}
                    }
                    else
                    {
                        oldEvents.Add(pair.Key);
                    }
                }
                else
                {
                    oldEvents.Add(pair.Key);
                }
            }
            else
            {
                oldEvents.Add(pair.Key);
            }
        }

        foreach (string eventID in oldEvents)
        {
            m_eventInfo.Remove(eventID);

            try
            {
                string filePath = GetCachedEventDataPath(eventID);
                FileInfo fileInfo = new FileInfo(filePath);

                // if the file is over a month old
                if ((DateTime.UtcNow - fileInfo.LastWriteTimeUtc).TotalDays > 30)
                {
                    File.Delete(GetCachedEventDataPath(eventID));
                }
            }
            catch (Exception) { }
        }

        PlayerPrefs.SetString(cachedEventData, MiniJSON.Serialize(m_eventInfo));
        PlayerPrefs.Save();

        return mergedData;
    }

    private Dictionary<string, object> LoadCachedGameData(Dictionary<string, object> baseData)
    {
        Dictionary<string, object> mergedData = null;

        string cachedJson = ReadCachedData(GetCachedGameDataPath(), out m_previousCachedChecksum, true);

        if (!string.IsNullOrEmpty(cachedJson))
        {
            mergedData = GameDataUtils.GetMergedData(baseData, cachedJson);
        }
        return mergedData;
    }

    private string GetCachedGameDataPath()
    {
        return string.Format("{0}/cached.gamedb", Application.temporaryCachePath);
    }

    private string ReadCachedData(string path, out string checksum, bool checkTimestamp)
    {
        checksum = null;
        string json = null;

        try
        {
            if (File.Exists(path))
            {
                using (FileStream fs = File.Open(path, FileMode.Open, FileAccess.Read))
                {
                    int versionLength = 0;
                    byte[] versionLengthBytes = BitConverter.GetBytes(versionLength);
                    fs.Read(versionLengthBytes, 0, versionLengthBytes.Length);
                    versionLength = BitConverter.ToInt32(versionLengthBytes, 0);

                    byte[] versionBytes = new byte[versionLength];
                    fs.Read(versionBytes, 0, versionLength);
                    string version = Encoding.UTF8.GetString(versionBytes);

                    if (version == Globals.GetApplicationVersion())
                    {
                        int cachedTimestamp = 0;

                        byte[] timestampBytes = BitConverter.GetBytes(cachedTimestamp);
                        fs.Read(timestampBytes, 0, timestampBytes.Length);
                        cachedTimestamp = BitConverter.ToInt32(timestampBytes, 0);

                        bool loadCachedData = true;
                        if (loadCachedData || !checkTimestamp)
                        {
                            byte[] checkSum = new byte[CheckSumLength];
                            fs.Read(checkSum, 0, checkSum.Length);

                            byte[] encryptedData = null;
                            using (MemoryStream ms = new MemoryStream())
                            {
                                var buffer = new byte[512];
                                var bytesRead = 0;
                                while ((bytesRead = fs.Read(buffer, 0, buffer.Length)) > 0)
                                {
                                    ms.Write(buffer, 0, bytesRead);
                                }

                                encryptedData = ms.ToArray();
                            }

                            string cachedJSON = DecryptGameDB(checkSum, encryptedData);
                            if (!string.IsNullOrEmpty(cachedJSON))
                            {
                                json = cachedJSON;
                            }
                            else
                            {
                                throw new Exception("Failed to Decrypt GameData");
                            }
                        }
                        else
                        {
                            Debug.Log("GameDataManager :: Local Game Data newer not loading cache");
                        }
                    }
                    else
                    {
                        throw new Exception("Version mismatch not loading cached data!");
                    }
                }
            }
            else
            {
                Debug.Log("GameDataManager :: No Cached Data found");
            }
        }
        catch (System.Exception e)
        {
            Debug.LogError("GameDataManager :: Failed to load cached data with exception - " + e);
            File.Delete(path);
        }

        return json;
    }

    private bool VerifyHash(byte[] checksum, byte[] gameDB)
    {
        RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
        rsa.FromXmlString(Encoding.UTF8.GetString(Convert.FromBase64String(PK)));

        return rsa.VerifyHash(MD5.Create().ComputeHash(gameDB), CryptoConfig.MapNameToOID("MD5"), checksum);

    }
    private string DecryptGameDB(byte[] checksum, byte[] gameDB)
    {
        string decrypted = null;

        //Verify Data
        if (VerifyHash(checksum, gameDB))
        {
            decrypted = GameDataUtils.DecryptGameData(gameDB, Encoding.UTF8);
        }
        else
        {
            Debug.LogError("GameDataManager (DecryptGameDB) :: Error Decrypting Game DB checksum failed!");
        }

        return decrypted;
    }

    private string GetCachedEventDataPath(string eventID)
    {
        return string.Format("{0}/{1}.gamedb", Application.temporaryCachePath, eventID);
    }

    public string ReadCachedEventJson(string key, out string checksum, bool checkTimeStamp)
    {
        return ReadCachedData(GetCachedEventDataPath(key), out checksum, false);
    }
}
