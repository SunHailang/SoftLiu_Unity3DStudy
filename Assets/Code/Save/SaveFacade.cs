using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using SoftLiu.Utilities;
using SoftLiu.Save;
using SoftLiu.Save.SaveStates;
using SoftLiu.Save.Errors;
using SoftLiu.Authentication;
using SoftLiu.Event;

public class SaveFacade : AutoGeneratedSingleton<SaveFacade>
{
    private bool m_inited = false;



    private bool m_cloudSaveEnabled = false;    //Determines if the cloud save system is enabled
    private bool m_cloudSaveDisabled = false;   //Determines if the system was disabled due to an error
    private bool m_cloudSaveAvailable = false;  //Determines if we can use cloud save at all ie do we have internet and valid servers
    private bool m_saveEnabled = true;          //Determines if saving is disabled while in game etc

    private bool m_scheduledSave = false;
    private MonoBehaviour m_scheduler = null;

    #region Private Accessors
    private bool cloudSaveAvailable
    {
        get { return m_cloudSaveAvailable; }
        set { m_cloudSaveAvailable = value; }
    }

    private bool cloudSaveDisabled
    {
        get { return m_cloudSaveDisabled; }
        set { m_cloudSaveDisabled = value; }
    }
    #endregion
    #region Save System
    private UserSaveSystem m_userSaveSystem = null;
    public UserSaveSystem userSaveSystem
    {
        get { return m_userSaveSystem; }
    }

    private IngameSaveSystem m_ingameSaveSystem = null;
    public IngameSaveSystem ingameSaveSystem
    {
        get { return m_ingameSaveSystem; }
    }
    #endregion
    public SaveFacade()
    {
        //SaveGameManager.Instance.CreateNewSave(Authenticator.Instance.User);
        m_userSaveSystem = new UserSaveSystem();
        RegisterSaveSystem(m_userSaveSystem);

        m_ingameSaveSystem = new IngameSaveSystem();
        RegisterSaveSystem(m_ingameSaveSystem);
    }

    public void Init()
    {
        if (!m_inited)
        {
            m_inited = true;
        }
    }

    public void Load()
    {

    }

    public void RegisterSaveSystem(SaveSystem saveSystem)
    {
        SaveGameManager.Instance.RegisterSaveSystem(saveSystem);
    }

    public void Save(string saveSystemName = null, bool upload = false)
    {
        //Test if we have the saves disabled this can't happen in-game state etc
        if (m_saveEnabled)
        {
            SaveGameManager.Instance.SaveSystems(saveSystemName);

            SaveState state = InternalSave(upload);

            //TODO make sure we don't show multiple popups at a time!
            if (state != SaveState.OK && state != SaveState.Disabled)
            {
                SaveGameManager.Instance.saveEnabled = false;
                int errorCode = -1;

                switch (state)
                {
                    case SaveState.PermissionError:
                        errorCode = (int)ErrorCodes.PermissionError;
                        SetSynced(false, ErrorState.PermissionError, ErrorCodes.PermissionError);
                        break;
                    default:
                        errorCode = (int)ErrorCodes.SaveError;
                        SetSynced(false, ErrorState.SaveError, ErrorCodes.SaveError);
                        break;
                }
            }
        }
    }

    public void LoadGameDB()
    {
        GameDataManager gm = GameDataManager.Instance;
        gm.LoadGameData();
        EventManager<Events>.Instance.TriggerEvent(Events.OnGameDBLoaded);
    }


    #region Private Methods

    private bool IsCloudSaveAvailable()
    {
        return false;
    }

    private void StartLoadFlow(bool useAuthFlow = false)
    {
        Debug.Log("SaveFacade (StartLoadFlow) :: Starting Flow using authFlow - " + useAuthFlow);

        bool cloudSaveAvailable = IsCloudSaveAvailable();

        SetSynced(false);

        CheckDiskSpace(delegate ()
        {
            Debug.Log("SaveFacade (StartLoadFlow) :: Internet connection available!");

            cloudSaveAvailable = IsCloudSaveAvailable();
            // Continue with cloud save if it's available and not disabled by logging out from existing fb account
            if (cloudSaveAvailable)
            {
                // Try to load existing file before auth/cloud flow as these functions may write data to the save file
                if (Authenticator.Instance.User != null && !string.IsNullOrEmpty(Authenticator.Instance.User.userID))
                {
                    SaveGameManager.Instance.Load(Authenticator.Instance.User);
                }
            }
            else
            {
                //ContinueLocally(false, false);
            }
        });
    }



    private void CheckDiskSpace(System.Action onContinue)
    {
        SpaceRequirementResult result = SaveGameManager.Instance.CheckDiskRequirements(Authenticator.Instance.User);
        bool error = true;
        string title = null;
        string message = null;

        switch (result)
        {
            case SpaceRequirementResult.PathUnavailable:
                title = "STRING_SAVE_POPUP_ERROR_SAVE_DISABLED_TITLE";
                message = "STRING_SAVE_POPUP_ERROR_SAVE_DISABLED_TEXT_SPACE";
                break;
            case SpaceRequirementResult.OutOfDiskSpace:
                title = "STRING_SAVE_POPUP_ERROR_SAVE_FAILED_TITLE";
                message = "STRING_SAVE_POPUP_ERROR_SAVE_DISABLED_TEXT_ACCESS";
                break;
            case SpaceRequirementResult.OK:
                error = false;
                break;
        }
        if (error)
        {
            SaveGameManager.Instance.saveEnabled = false;

            //MessageBoxPopup.MessageBoxConfig config = new MessageBoxPopup.MessageBoxConfig();
            //config.titleText = title;
            //config.messageText = message;
            //config.confirmText = "STRING_BUTTON_RETRY";
            //config.onConfirm = delegate ()
            //{
            //    CheckDiskSpace(onContinue);
            //};
            //config.cancelEnabled = false;
            //config.backButtonMode = MessageBoxPopup.MessageBoxConfig.BackButtonMode.confirm;

            //MessageBoxPopup.OpenMessageBox(config);
        }
        else
        {
            //TODO is this the safest place to renable this?
            SaveGameManager.Instance.saveEnabled = true;
            onContinue();
        }
    }

    private void SetSynced(bool synced, ErrorState state = ErrorState.None, ErrorCodes errorCode = ErrorCodes.Unset, string errorMessage = null)
    {
        if (!synced && state != ErrorState.None)
        {
            cloudSaveDisabled = true;
        }
    }

    private SaveState InternalSave(bool upload)
    {
        Debug.Log("SaveFacade :: Saving locally");
        SaveState state = SaveGameManager.Instance.SaveToDisk();

        if (state == SaveState.OK)
        {
            Debug.Log("SaveFacade :: Save to disk successful");

            if (upload)
            {
                if (m_scheduler != null)
                {
                    m_scheduler.StartCoroutine(ScheduleUpload());
                }
            }
        }

        return state;
    }

    private IEnumerator ScheduleUpload()
    {
        yield return null;
    }
    #endregion
}
